/*
 *   SniffJoke is a software able to confuse the Internet traffic analysis,
 *   developed with the aim to improve digital privacy in communications and
 *   to show and test some securiy weakness in traffic analysis software.
 *   
 *   Copyright (C) 2010 vecna <vecna@delirandom.net>
 *                      evilaliv3 <giovanni.pellerano@evilaliv3.org>
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/*
 * This file represents a simple skeleton source for sniffjoke hacks;
 * With this We want to give a little demostration of the capabilities of the
 * sniffjoke infrastructure giving some useful information for researchers and
 * contributors.
 */

/*
 * HACK COMMENT:, every hacks require intensive comments because should cause 
 * malfunction, or KILL THE INTERNET :)
 *
 * Every hacks need to be commented out, and the comment must be extensive.
 * An hack not well decribed will result a unuseful.
 * 
 * The last part of the decription must include a short tag description
 * uniformed to the others present in others hacks.
 * A simple example follow:
 * 
 * SOURCE: [ deduction? ], [ software analysis? ], [empiric]
 * VERIFIED IN: [linux 2.6.36?]
 * KNOW BUGS: [does not work in some circumstances?]
 * WRITTEN IN VERSION: [version of sniffjoke at the time the hack was written and verified ]
 */

#include "Hack.h"

class ##HACK_CLASS_NAME## : public Hack
{
#define HACK_NAME "##HACK_SHORT_DESCRIPTION##"
public:

	/* mandatory createHack function, works as a constructor for the hack. */
	/* every function you need to use is in Packet.h, inside Packet & class */
	virtual void createHack(Packet &orig_packet)
	{
		orig_packet.selflog(HACK_NAME, "Original packet");

		/* One or more hack packet can be created using new allocation, those are the
		 * Packets * you will return to SniffJoke */
		Packet* pkt1 = new Packet(orig_packet);
		Packet* pkt2 = new Packet(orig_packet);

		/* Hack can be manipolated using functions defined in Packet.h, fill the data with
		 * random payload */

		/* the first packet became a sequence valid reset */
                pkt->tcp->seq = htonl(ntohl(pkt->tcp->seq) - pkt->datalen + 1);
		pkt1->TCPPAYLOAD_resize(0);
		/* Change the TCP flag or other in the packets */
		pkt1->tcp->ack = pkt1->tcp->fin = pkt1->tcp->syn = pkt1->tcp->push = 0;
		pkt1->tcp->rst = pkt1->tcp->ack = 1;

		/* the second is set to contain a fake data */
                pkt->tcp->seq = htonl(ntohl(pkt->tcp->seq) - pkt->datalen + 512);
		pkt2->TCPPAYLOAD_resize(512);
		pkt2->tcp->ack = pkt2->tcp->rst = pkt2->tcp->syn = pkt2->tcp->fin = 0;
		pkt2->tcp->push = 1;
		pkt2->fillRandomPayload();

		/* we want to fill with 'A' the TCPoption and strip the previously present */
		pkt2->TCPHDR_resize(40);

		int i;
		for(i = sizeof(struct tcphdr); i < 40; i++)
			(unsigned char *)&pkt2->tcp[i] = 'A';

		/* Hacks options can be setted like hack position */

		/* the fake data is set to be sent BEFORE the original data. we are not
		 * sure of arrival order, because TCP could support reordering, anyway
		 * a Packet set in ANTICIPATION is sent before those marked as POSTICIPATION */
		pkt2->position = ANTICIPATION;

		/* the reset is sent 
		pkt1->position = POSTICIPATION;

		/* the reset we want expire an hop before the service */
		pkt1->wtf = PRESCRIPTION;

		/* the fake data, with the invlide 'A' TCP options, is sent MALFORMED */
		pkt2->wtf = MALFORMED; // or RANDOMDAMAGE, or GUILTY

		/* A self log message could be outputted onto hack creation */
		pkt1->selflog(HACK_NAME, "Hacked Packet1 the valid reset with stripped of payload, expired before reach remote host");
		pkt2->selflog(HACK_NAME, "Hacked Packet2 the fake payload with invalid tcpopt and malformed ipopt");

		/* The hacks constructed must be pushed inside pktVector */
		pktVector.push_back(pkt1);
		pktVector.push_back(pkt2);

		/* you should modify the orig_packet too, if required */
		orig_packet.tcp->urg = 1;
	}

	/* Optional condition that the orig_packet must fulfil to make this hack work */
	virtual bool Condition(const Packet &orig_packet)
	{
		return (orig_packet.payload != NULL);		
	}

	/* constructor, here hackName and HackFrequency must be defined */
	##HACK_CLASS_NAME##() {
		hackName = HACK_NAME;
		/* the meaning of COMMON and of the other Frequency, is explained in http://www.delirandom.net/sniffjoke/plugin */
		hackFrequency = COMMON;
	}
};

/*
 * extern C function used for dynamic linking, must be implemented as is
 * except for the name of the function called.
 */
extern "C"  Hack* CreateHackObject() {
	return new ##HACK_CLASS_NAME##();
}

/*
 * Hack destructor.
 * Here can be defined cleanup operation for the hack
 *
 */
extern "C" void DeleteHackObject(Hack *who) {
	delete who;
}

/*
 * Hack version, every loaded plugin is checked to be explicitally written & compiled with the
 * same sniffjoke version.
 */
extern "C" const char *versionValue() {
 	return SW_VERSION;
}
