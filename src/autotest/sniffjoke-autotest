#!/bin/bash 

shopt -s expand_aliases
alias echo="echo -e"

red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
violet="\e[1;35m"
white="\e[1;39m"

#default values
LOCATION=
WORKPATH=
TESTN=1

usage()
{
cat << EOF
usage: $0 options

This script runs plugins test along different destinations OS
to determinate the selection of plugins that correctly works
in the current location.

every plugin it's tested with one of each scrambling tech.

OPTIONS:
   -h      show this message
   -l      location name                                    (required)
   -d      path of 'generic/' location, acting as default   (required)
   -n      number of tests to be passed for the single hack (default 1)
EOF
}

dump_plugin_file() {
cat >> $PLUGINLIST << __EOF__
fake_close_fin,PRESCRIPTION
fake_close_fin,MALFORMED
fake_close_fin,GUILTY
fake_close_rst,PRESCRIPTION
fake_close_rst,MALFORMED
fake_close_rst,GUILTY
fake_data,PRESCRIPTION
fake_data,MALFORMED
fake_data,GUILTY
fake_seq,PRESCRIPTION
fake_seq,MALFORMED
fake_seq,GUILTY
fake_syn,PRESCRIPTION
fake_syn,MALFORMED
fake_syn,GUILTY
fake_window,PRESCRIPTION
fake_window,MALFORMED
fake_window,GUILTY
fragmentation,INNOCENT
segmentation,INNOCENT
shift_ack,PRESCRIPTION
shift_ack,MALFORMED
shift_ack,GUILTY
valid_rst_fake_seq,INNOCENT
__EOF__
}

start_test() {
    PNAME=`echo $PLUGIN | sed -es/\\,.*//`
    SCRAMBLE=`echo $PLUGIN | sed -es/.*\,//`
    TESTID=`echo $PLUGIN | tr "," "-"`
    workingdir="/tmp/$LOCATION/$TESTID"
    echo "${green}* COMBINATION OF TESTS (${yellow}$PLUGNDX/$PLUGIN_NUMBER${green})"
    echo "${blue}Plugin Name\t${yellow}\t[$PNAME]"
    echo "${blue}Scramble\t${yellow}\t[$SCRAMBLE]"
    echo "${blue}TestID\t\t${yellow}\t[$TESTID]"
    echo "${blue}Test directory\t${yellow}\t[$workingdir]"
    mkdir -p $workingdir
    echo $SERVER_IP > "$workingdir/ipwhitelist.conf"
    echo "${yellow}* Executing sniffjoke with $PLUGIN combo, using these options:"
    echo "${white}sniffjoke --debug 6 --start --dir /tmp/$LOCATION --location $TESTID --only-plugin $PLUGIN --no-udp --whitelist${white}"
    $SNIFFJOKEBIN --debug 6 --start --dir /tmp/$LOCATION --location $TESTID --only-plugin $PLUGIN --no-udp --whitelist &>$workingdir/binout.log
    sleep 2
    $SNIFFJOKECLIBIN stat > $workingdir/dumped_stat.log
    cd $workingdir
    # $SERVER is like http://www.delirandom.net/sniffjoke_autotest/post_echo.php
    INTERFACE=`$SNIFFJOKECLIBIN stat | grep "hijacked interface" | cut -b 21-`
    echo "${yellow}* Starting tcpdump in $INTERFACE dumping $workingdir/$PNAME-$SCRAMBLE.pcap tcp port 80 and host $SERVER_IP or icmp${white}"
    (tcpdump -i $INTERFACE -w $workingdir/$PNAME-$SCRAMBLE.pcap -s 0 tcp port 80 and host $SERVER_IP or icmp) &
    route -n > $workingdir/route-n.log
    sleep 1
    for i in `seq 1 $TESTN`;
    do
        echo "${yellow}* Starting curl to post/echo at $SERVER_ADDR ($SERVER_IP) under monitoring ${green}(${yellow}test repetition #$i of $TESTN${green})${white}"
        nohup curl --retry 0 --max-time 10 -o "$PNAME-$SCRAMBLE-$i.received" \
            -d "sparedata=`cat $GENERATEDFILE`" $SERVER > "$PNAME-$SCRAMBLE-$i.curl_output"
        sleep 1
    done
    $SNIFFJOKECLIBIN info > $workingdir/dumpService_info.log
    $SNIFFJOKECLIBIN ttlmap > $workingdir/dumpService_ttlmap.log
    $SNIFFJOKECLIBIN quit > $workingdir/dumpService_stat.log
    sleep 1
    killall -TERM tcpdump

    failed=0;
    for i in `seq 1 $TESTN`;
    do
        if ! [ -e "$PNAME-$SCRAMBLE-$i.received" ]; then
            CHECKSUM="{unexistent-output-file}"
        else
            CHECKSUM=`md5sum "$PNAME-$SCRAMBLE-$i.received" | cut -b -32`
        fi

        echo "orig:$VERIFYSUM recv:$CHECKSUM $TESTID $i" >> /tmp/$LOCATION/SjcollectedFeedback
        if [ $VERIFYSUM != $CHECKSUM ];
        then
            # the .failed_hacks and the .working_hacks is generated and treated in the same style
            echo "$SCRAMBLE" >> "/tmp/$LOCATION/$PNAME.failed_hacks"
            # the follow are useful infos for debug
            echo "$VERIFYSUM vs $CHECKSUM from $PNAME-$SCRAMBLE-$i" >> "/tmp/$LOCATION/$PNAME.failed_info"
            cat "$PNAME-$SCRAMBLE-$i.curl_output" >> "/tmp/$LOCATION/$PNAME.failed_info"
            failed=1;        
	    break
        else
            echo $i >> "$PNAME-$SCRAMBLE.passed_count"
        fi
    done

    if [ $failed -eq 0 ];
    then
        echo "$SCRAMBLE" >> "/tmp/$LOCATION/$PNAME.working_hacks"
        echo "${yellow}* Finished test $TESTID: ${green}TEST PASSED${white}\n"
    else
        echo "${yellow}* Finished test $TESTID: ${red}TEST FAILED${white}\n"
    fi

    cd ..
}

while getopts “hl:d:n:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         l)
             LOCATION=$OPTARG
             ;;
         d)
             WORKPATH=$OPTARG
             ;;
         n)
             TESTN=$OPTARG
             ;;
         ?)
             usage
             exit 1
             ;;
     esac
done

USERID=`id -u`
if [ $USERID != "0" ]; then
    echo "- Error, only root should run $0"
    exit;
fi

if [ -z $LOCATION ]; then
    usage
    echo "\n"
    echo "it's required a LOCATION name, eg: office, home, nickhome, starbucks..."
    echo "sniffjoke-autotest will generate the best plugins_enabled.conf usable in this environment"
    echo "at the end of the tests (that include continuos restarting of sniffjoke with different options)"
    echo "will be created a new directory describing your location. after you will customize the options"
    exit;
fi

if [ -z $WORKPATH ]; then
    usage
    echo "\n"
    echo "it's required the PATH of commonly used working dir, where 'generic' is installed"
    echo "usually it's /usr/local/var/sniffjoke, otherwise, try to locate where generic location has"
    echo "been installed in your distro"
    exit;
fi

if [ ! -d $WORKPATH ]; then
    usage
    echo "\n"
    echo "option \"-d\" wrong argument: no such directory exist"
    exit;
fi

if [ ! -d "$WORKPATH/generic" ]; then
    usage
    echo "\n"
    echo "options \"-d\" invalid directory: we are looking for the path containing 'generic/'"
    echo "sniffjoke-autotest create at the given \"-d\", the new '$LOCATION/' copying some files from 'generic/'"
    exit;
fi

if [ -d "/tmp/$LOCATION" ]; then
    echo "\n"
    echo "- remove your /tmp/$LOCATION directory: already present"
    # call me old, but I don't put a blind rm -rf on a script run by root :P
    exit;
fi

SNIFFJOKEBIN=`which sniffjoke`
if [ -z $SNIFFJOKEBIN ]; then
    echo "\n"
    echo "\"which sniffjoke\" has found nothing"
    echo "Are sniffjoke installed with the name \"sniffjoke\" ?"
    exit;
fi

SNIFFJOKECLIBIN=`which sniffjokectl`
if [ -z $SNIFFJOKECLIBIN ]; then
        echo "\"which sniffjokectl\" has found nothing"
        echo "Are sniffjoke installed with the name \"sniffjokectl\" ?"
        exit;
fi

echo "+ Starting SniffJoke hacks test"
echo "* Stopping possible running sniffjoke ($SNIFFJOKECLIBIN quit)"
$SNIFFJOKECLIBIN quit

PPATH="/usr/local/lib/sniffjoke"
echo "* using plugin path $PPATH"

FILEURL="http://www.delirandom.net/sniffjoke/testsuite.info"
echo "retrivering multi-OS testing server list ($FILEURL)"
SERVERFILE="/tmp/testsuite.info"
wget -O $SERVERFILE $FILEURL

if ! [ -e $SERVERFILE ]; then
    echo "- unable to retriver $SERVERFILE with [$FILEURL]"
    exit;
fi

PLUGINLIST="/tmp/$LOCATION/sniffjoke-testsuite-plugins"
if ! [ -e $PLUGINLIST ]; then
    mkdir /tmp/$LOCATION
    dump_plugin_file
fi
PLUGIN_NUMBER=`wc -l < $PLUGINLIST`

# generate the SPAREDATA file to send
GENERATEDFILE="/tmp/$LOCATION/SPAREDATA.generated"
# the number '6' is not used in the test because sniffjoke, when runned
# in debug mode (--debug 6) instead of filling the random segment of data
# inject with random data, use the number '6'. Is useful when debugging 
# an hack.
seq 1000 9000 | tr -d [:cntrl:] | sed -e's/6/111/g' | strings > $GENERATEDFILE
VERIFYSUM=`md5sum $GENERATEDFILE | cut -b -32`

for PLUGNDX in `seq 1 $PLUGIN_NUMBER`; do
    PLUGIN=`head -$PLUGNDX $PLUGINLIST | tail -1`

#    OS="WINDOWS"
#    SERVER=`cat "$SERVERFILE" | grep "$OS" | cut -b 9-`
#    echo $SERVER
#    start_test

    # those test need to be fixed or be used only where my test script will be hosted
    OS="LINUX"
    SERVER=`grep "$OS=" $SERVERFILE | cut -b 7-`
    SERVER_ADDR=`echo $SERVER | cut -b 8- | sed -e's/\/.*//'`
    SERVER_IP=`host $SERVER_ADDR | head -1 | sed -e's/.*address\ //'`
    start_test

#    OS="OTHER"
#    SERVER=`grep "$OS=" $SERVERFILE | cut -b 7-`
#    echo $SERVER
#    start_test
done

# parse analysis output to build a plugins_enabler.conf

success=`ls /tmp/$LOCATION/*.working_hacks`
PeL="/tmp/$LOCATION/plugins-enabled.conf"
echo "# this is an autogenerated file by sniffjoke-autotest " > $PeL
echo "# wheneven your network router, provider or some malfunction is detected" >> $PeL
echo "# you are invited to regenerate this file" >> $PeL
echo "# this plugins_enabled.conf are dumped for location: $LOCATION" >> $PeL
echo "\n" >> $PeL

success_count=0
for hack in $success; do
    hackName=`basename $hack | sed -es/.working_hacks//`
    scramble=`cat $hack | tr " " "," | tr [:cntrl:] ","`
    echo "$hackName,$scramble" | sed -es/,\$// >> $PeL
    success_count=$(($success_count+1));
done

echo "\n# follow the hacks+scramble that don't pass the sniffjoke-autotest in environment $LOCATION\n" >> $PeL
failure_count=0
failure=`ls /tmp/$LOCATION/*.failed_hacks`
for hack in $failure ; do
    hackName=`basename $hack | sed -es/.failed_hacks//`
    scramble=`cat $hack | tr " " "," | tr [:cntrl:] ","`
    echo "# $hackName,$scramble" | sed -es/,\$// >> $PeL
    failure_count=$(($failure_count+1));
done

now=`date`
echo "\n# Generated in date: $now\n" >> $PeL

echo "${yellow}FINISHED!\n"
echo " ${red} $failure_count combinations of hack+scramble have not worked"
echo " ${green} $success_count combinations of hack+scramble have worked correctly"

tput sgr0

chmod 444 /tmp/$LOCATION/plugins-enabled.conf
mkdir $WORKPATH/$LOCATION
cp $WORKPATH/generic/port-aggressivity.conf $WORKPATH/$LOCATION
cp $WORKPATH/generic/sniffjoke-service.conf $WORKPATH/$LOCATION
cp /tmp/$LOCATION/plugins-enabled.conf $WORKPATH/$LOCATION/plugins-enabled.conf

echo "\n${yellow}* sniffjoke-autotest has generated a conf file /tmp/$LOCATION/plugins_enabled.conf"
echo "* that conf has been copyed in $WORKPATH/$LOCATION with the other default configuration file."
echo "* for custom configuration this config file can be text edited."
echo "* now, when in this network environment, you could get the best sniffjoke behaviour starting it with the option --location $LOCATION\n"

tput sgr0

echo "\n${violet}SniffJoke is in BETATESTING: if you want to contribute, please type your nick or a simple string."
echo "The typed string will be used to generate the name of the compressed data archive"
echo "Otherwise, to don't generate the tar.gz, leave the string empty."

tput sgr0

echo "\n"
echo "testerID: "
read testerID

if [ -z $testerID ]; then
    echo "empty string: sniffjoke-autotest done."
else
    cd /tmp
    dFname="Sj-test-$testerID-$LOCATION.tar.gz"
    tar zcf $dFname $LOCATION/
    echo "\n"
    echo "${green}Thanks you! ${white}$dFname has been generated and saved in /tmp dir; please send it to sniffjoke-team@delirandom.net;"
    echo "We assure that all data collected will be used only for research purpose and will be disclosed oly to SniffJoke developers"
fi

# clearing gay colors
tput sgr0

