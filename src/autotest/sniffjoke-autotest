#!/bin/bash 

# if you want modify the test, simply create those file by hands

#default values
LOCATION=
WORKPATH=
TESTN=1

usage()
{
cat << EOF
usage: $0 options

This script runs plugins test along different destinations OS
to determinate the selection of plugins that correctly works
in the current location.

every plugin it's tested with one of each scrambling tech.

OPTIONS:
   -h      show this message
   -l      location name
   -d      path of 'generic/' location, acting as default
   -n      number of tests to be passed for the single hack (default 1)
EOF
}

dump_plugin_file() {
    cat >> $PLUGINLIST << __EOF__
fake_close_fin,PRESCRIPTION
fake_close_fin,MALFORMED
fake_close_fin,GUILTY
fake_close_rst,PRESCRIPTION
fake_close_rst,MALFORMED
fake_close_rst,GUILTY
fake_fragment,PRESCRIPTION
fake_fragment,MALFORMED
fake_segment,PRESCRIPTION
fake_segment,MALFORMED
fake_segment,GUILTY
fake_seq,PRESCRIPTION
fake_seq,MALFORMED
fake_seq,GUILTY
fake_syn,PRESCRIPTION
fake_syn,MALFORMED
fake_syn,GUILTY
fake_zero_window,INNOCENT
fragmentation,INNOCENT
segmentation,INNOCENT
shift_ack,PRESCRIPTION
shift_ack,MALFORMED
shift_ack,GUILTY
valid_rst_fake_seq,INNOCENT
__EOF__
}

start_test() {
    PNAME=`echo $PLUGIN | sed -es/\\,.*//`
    SCRAMBLE=`echo $PLUGIN | sed -es/.*\,//`
    TESTID=`echo $PLUGIN | tr "," "-"`
    workingdir="/tmp/$LOCATION/$TESTID"
    echo -e "Plugin Name\t\t[$PNAME]\nScramble\t\t[$SCRAMBLE]\nTestID\t\t\t[$TESTID]\n--dir\t\t\t[$workingdir]\n"
    mkdir -p $workingdir
    echo -e "+ Executing sniffjoke with $PLUGIN and $SCRAMBLE, command line:\n"
    echo "$SNIFFJOKEBIN --debug 6 --start --dir /tmp/$LOCATION --location $TESTID --only-plugin $PLUGIN "
    $SNIFFJOKEBIN --debug 6 --start --dir /tmp/$LOCATION --location $TESTID --only-plugin $PLUGIN
    sleep 2
    $SNIFFJOKECLIBIN stat > $workingdir/dumped_stat.log
    cd $workingdir
    # $SERVER is like http://www.delirandom.net/sniffjoke_autotest/post_echo.php
    INTERFACE=`$SNIFFJOKECLIBIN stat | grep "hijacked interface" | cut -b 21-`
    echo "starting tcpdump in $INTERFACE dumping $workingdir/$PNAME-$SCRAMBLE.pcap tcp port 80"
    (tcpdump -i $INTERFACE -w $workingdir/$PNAME-$SCRAMBLE.pcap -s 0 tcp port 80) &
    ps axf > $workingdir/ps-axf.log
    route -n > $workingdir/route-n.log
    sleep 1
    for i in `seq 1 $TESTN`;
    do
        curl -m 10 -d "sparedata=`cat $GENERATEDFILE`" $SERVER > "$PNAME-$SCRAMBLE-$i.received"
        sleep 1
    done
    $SNIFFJOKECLIBIN quit
    sleep 2
    killall -9 tcpdump
    for i in `seq 1 $TESTN`;
    do
        CHECKSUM=`md5sum "$PNAME-$SCRAMBLE-$i.received" | cut -b -32`
        echo "orig:$VERIFYSUM recv:$CHECKSUM $TESTID" >> /tmp/$LOCATION/SjcollectedFeedback
        if [ $VERIFYSUM != $CHECKSUM ];
        then
            echo "$SCRAMBLE" >> "/tmp/$LOCATION/$PNAME.failed_hacks"
            break
        else
            echo $i >> "$PNAME-$SCRAMBLE.passed_count"
        fi
        if [ $i -eq $TESTN ];
        then
            echo "$SCRAMBLE" >> "/tmp/$LOCATION/$PNAME.working_hacks"
        fi
    done
    cd ..
    echo "finished test in $TESTID"
}

while getopts “hl:d:n:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         l)
             LOCATION=$OPTARG
             ;;
         d)
             WORKPATH=$OPTARG
             ;;
         n)
             TESTN=$OPTARG
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

USERID=`id -u`
if [ $USERID != "0" ]; then
    echo "- Error, only root should run $0"
    exit;
fi

if [ -z $LOCATION ]; then
    usage
    echo -en "\n"
    echo "it's required a LOCATION name, eg: office, home, nickhome, starbucks..."
    echo "sniffjoke-autotest will generate the best plugins_enabled.conf usable in this environment"
    echo "at the end of the tests (that include continuos restarting of sniffjoke with different options)"
    echo "will be created a new directory describing your location. after you will customize the options"
    exit;
fi

if [ -z $WORKPATH ]; then
    usage
    echo -en "\n"
    echo "it's required the PATH of commonly used working dir, where 'generic' is installed"
    echo "usually it's /usr/local/var/sniffjoke, otherwise, try to locate where generic location has"
    echo "been installed in your distro"
    exit;
fi

if [ ! -d $WORKPATH ]; then
    usage
    echo -en "\n"
    echo "option \"-d\" wrong argument: no such directory exist"
    exit;
fi

if [ ! -d "$WORKPATH/generic" ]; then
    usage
    echo -en "\n"
    echo "options \"-d\" invalid directory: we are looking for the path containing 'generic/'"
    echo "sniffjoke-autotest create at the given \"-d\", the new '$LOCATION/' copying some files from 'generic/'"
    exit;
fi

if [ -d "/tmp/$LOCATION" ]; then
    echo "- remove your /tmp/$LOCATION directory: already present"
    # call me old, but I don't put a blind rm -rf on a script run by root :P
    exit
fi

SNIFFJOKEBIN=`which sniffjoke`
if [ -z $SNIFFJOKEBIN ]; then
    echo "\"which sniffjoke\" has found nothing"
    echo "Are sniffjoke installed with the name \"sniffjoke\" ?"
    exit;
fi

SNIFFJOKECLIBIN=`which sniffjokectl`
if [ -z $SNIFFJOKECLIBIN ]; then
        echo "\"which sniffjokectl\" has found nothing"
        echo "Are sniffjoke installed with the name \"sniffjokectl\" ?"
        exit;
fi

echo "+ Starting SniffJoke hacks test"
echo "* Stopping running sniffjoke ($SNIFFJOKECLIBIN quit)"
$SNIFFJOKECLIBIN quit

PPATH="/usr/local/lib/sniffjoke"
echo "* using plugin path $PPATH"

FILEURL="http://www.delirandom.net/sniffjoke/testsuite.info"
echo "retrivering multi-OS testing server list ($FILEURL)"
SERVERFILE="/tmp/testsuite.info"
wget -O $SERVERFILE $FILEURL

if ! [ -e $SERVERFILE ]; then
    echo "- unable to retriver $SERVERFILE with [$FILEURL]"
    exit;
fi

PLUGINLIST="/tmp/$LOCATION/sniffjoke-testsuite-plugins"
if ! [ -e $PLUGINLIST ]; then
    mkdir /tmp/$LOCATION
    dump_plugin_file
fi
PLUGIN_NUMBER=`wc -l < $PLUGINLIST`

# generate the SPAREDATA file to send
GENERATEDFILE="/tmp/$LOCATION/SPAREDATA.generated"
seq 1000 9000 | tr -d [:cntrl:] | strings > $GENERATEDFILE
VERIFYSUM=`md5sum $GENERATEDFILE | cut -b -32`

for PLUGNDX in `seq 1 $PLUGIN_NUMBER`; do
    PLUGIN=`head -$PLUGNDX $PLUGINLIST | tail -1`

#    OS="WINDOWS"
#    SERVER=`cat "$SERVERFILE" | grep "$OS" | cut -b 9-`
#    echo $SERVER
#    start_test

    # those test need to be fixed or be used only where my test script will be hosted
    OS="LINUX"
    SERVER=`grep "$OS=" $SERVERFILE | cut -b 7-`
    start_test

#    OS="OTHER"
#    SERVER=`grep "$OS=" $SERVERFILE | cut -b 7-`
#    echo $SERVER
#    start_test
done

# parse analysis output to build a plugins_enabler.conf

success=`ls /tmp/$LOCATION/*.working_hacks`
PeL="/tmp/$LOCATION/plugins_enabled.conf"
echo -en "\n# this is an autogenerated file by sniffjoke-autotest " > $PeL 
echo -en "\n# wheneven your network router, provider or some malfunction is detected" >> $PeL
echo -en "\n# you are invited to regenerate this file" >> $PeL
echo -en "\n# this plugins_enabled.conf are dumped for location: $LOCATION" >> $PeL
echo -en "\n\n" >> $PeL

for hack in $success; do
    hackName=`basename $hack | sed -es/.working_hacks//`
    scramble=`cat $hack | tr " " "," | tr [:cntrl:] ","`
    echo -en "\n$hackName,$scramble" | sed -es/,\$// >> $PeL
done

echo -en "\n\n# follow the hacks/scramble that don't pass the sniffjoke-autotest in environment $LOCATION\n" >> $PeL
failure=`ls /tmp/$LOCATION/*.failed_hacks`
for hack in $failure ; do
    hackName=`basename $hack | sed -es/.failed_hacks//`
    scramble=`cat $hack | tr " " "," | tr [:cntrl:] ","`
    echo -en "\n# $hackName,$scramble" | sed -es/,\$// >> $PeL
done

now=`date`
echo -en "\n\n# Generated in date: $now" >> $PeL

echo "file /tmp/$LOCATION/plugins_enabled.conf has been generated"
chmod 444 /tmp/$LOCATION/plugins_enabled.conf
mkdir $WORKPATH/$LOCATION
cp $WORKPATH/generic/port-aggressivity.conf $WORKPATH/$LOCATION
cp $WORKPATH/generic/sniffjoke-service.conf $WORKPATH/$LOCATION
# note: is generate with the "_" in the name, is copyed with the "-" in the name (and stripped .location suffix)
cp /tmp/$LOCATION/plugins_enabled.conf $WORKPATH/$LOCATION/plugins-enabled.conf
echo -e "\n\n\n\nFINISHED!\n\n\n\n"
echo "setted up $WORKPATH/$LOCATION with TCP ports defaults, your generic sniffjoke-service.conf and the newly generated enabler."
echo "now you will start sniffjoke with the option --location $LOCATION when you are in this network environment."
