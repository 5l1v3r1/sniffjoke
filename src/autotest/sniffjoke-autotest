#!/bin/bash

shopt -s expand_aliases
alias echo="echo -e"

red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
violet="\e[1;35m"
white="\e[1;39m"

#default values
VERSION="04"
LOCATION=
WORKPATH=
USERNAME=
GROUPNAME=
SERVERURL=
REPN=1
firstsimple=

usage()
{
cat << EOF
usage: $0 options

This script runs plugins test along different destinations OS
to determinate the selection of plugins that correctly works
in the current location.

every plugin it's tested with one of each scrambling tech.

OPTIONS:
   -h      show this message
   -l      location name                                       (required)
   -d      path of 'generic/' location, acting as default      (required)
   -n      number of replicas to be passed for the single hack (default 1)
   -g      specify the group to privilege downgrade            (default: nogroup)
   -u      specify the user to privilege downgrade             (default: nobody)
EOF
}

dump_plugin_file() {
cat >> $PLUGINLIST <<__EOF__
fake_close_fin,PRESCRIPTION
fake_close_fin,MALFORMED
fake_close_fin,GUILTY
fake_close_rst,PRESCRIPTION
fake_close_rst,MALFORMED
fake_close_rst,GUILTY
fake_data,PRESCRIPTION
fake_data,MALFORMED
fake_data,GUILTY
fake_seq,PRESCRIPTION
fake_seq,MALFORMED
fake_seq,GUILTY
fake_syn,PRESCRIPTION
fake_syn,MALFORMED
fake_syn,GUILTY
fake_window,PRESCRIPTION
fake_window,MALFORMED
fake_window,GUILTY
fragmentation,INNOCENT
shift_ack,PRESCRIPTION
shift_ack,MALFORMED
shift_ack,GUILTY
valid_rst_fake_seq,INNOCENT
__EOF__
}

routing_table_log() {
    route -n > $WORKDIR/route-$1.log
}

group_check() {
    GROUPNAME=`groups $USERNAME | cut -d " " -f 3` 
    if [ -z "$GROUPNAME" ]; then
        echo "${red}Unable to found, in your system, the group of $USERNAME. ${white}please specify with the option -g and -u username/group"
        echo "(hey, you package mantainer! is better you create a dedicated sniffjoke user/group)"
        echo "A group is required because sniffjoke drop privileges. You will need to customize the ${green}sniffjoke-server.conf ${white}"
        echo "because by default is used nobody/nogroup"
        tput sgr0; exit
    fi
}

start_test() {
    REPLICAn=$1
    if [[ $PLUGIN =~ ([a-z_]+),([A-Z0-9\+]+) ]]; then
        PNAME=${BASH_REMATCH[1]}
        SCRAMBLE=${BASH_REMATCH[2]}
        TESTID=$PNAME/$SCRAMBLE
    fi
    mkdir -p $TESTID
    echo "${green}.----"
    echo "${green}| ${blue}Plugin Name\t${yellow}\t[$PNAME]"
    echo "${green}| ${blue}Scramble\t${yellow}\t[$SCRAMBLE]"
    echo "${green}| ${blue}TestID\t${yellow}\t[$TESTID]"
    echo "${green}| ${blue}Test directory${yellow}\t[$TEMPDIR/$LOCATION/$TESTID]${white}"
    # $SERVER is like http://www.delirandom.net/sniffjoke_autotest/post_echo.php
    for i in `seq 1 $REPLICAn`;
    do
        WORKDIR=$TESTID/replica-${i}
        mkdir -p $TESTID/replica-${i}

        cp $WORKPATH/generic/sniffjoke-service.conf $TESTID/replica-${i}/
        echo $SERVER_IP > $WORKDIR/ipwhitelist.conf

        if [ -e $firstsimple/ttlfocusmap.bin ]; then
            cp $firstsimple/ttlfocusmap.bin $TESTID/replica-${i}/
            cp $TEMPDIR/$LOCATION/iptcp-options.conf $TESTID/replica-${i}
            echo "${green}| * COMBINATION OF TESTS (${yellow}$PLUGNDX/$PLUGIN_NUMBER${green}) REPLICA (${yellow}$i/$REPLICAn${green})"
        else
            echo "${green}| * ${blue}Goal:\t${green}\t[generate ttlfocusmap.bin, and test sniffjoke without any esoteric network trick]${white}"
            cp $WORKPATH/generic/iptcp-options.conf $TESTID/replica-${i}
        fi

        echo "${yellow}** Executing sniffjoke with $PLUGIN combo${white}"
        echo "sniffjoke --debug 6 $UGPD --start --dir $TEMPDIR/$LOCATION/$TESTID --location replica-${i} --only-plugin $PLUGIN --no-udp --whitelist"

        $SNIFFJOKEBIN --debug 6 $UGPD --start --dir $TEMPDIR/$LOCATION/$TESTID --location replica-${i} --only-plugin $PLUGIN --no-udp --whitelist >/dev/null 2>&1
        sleep 0.8
        routing_table_log "after"

        $SNIFFJOKECLIBIN stat > $WORKDIR/dumpService_stat.log
        if [ "$?" -eq 0 ]; then
            echo "${green}sniffjoke is correctly running${white}"
        else
            echo "${red}sniffjoke is not running - fatal error - remove $TEMPDIR/$LOCATION by hand${white}"
            tput sgr0; exit
        fi

        INTERFACE=`cat $WORKDIR/dumpService_stat.log | grep "hijacked interface:" | awk '{print $3}'`
        if [ -n "$INTERFACE" ]; then
            echo "${yellow}** Starting tcpdump on $INTERFACE${white}"
        else
            echo "${red}Unable to detect hijacked interface name by $WORKDIR/dumpService_stat.log - fatal - remove $TEMPDIR/$LOCATION by hand${white}"
            tput sgr0; exit
        fi

        echo "tcpdump -i $INTERFACE -U -w $PNAME-$SCRAMBLE-$i.pcap -s 0 tcp port 80 and host $SERVER_IP or icmp"
        tcpdump -i $INTERFACE -U -w $WORKDIR/$PNAME-$SCRAMBLE-$i.pcap -s 0 tcp port 80 and host $SERVER_IP or icmp >$WORKDIR/output.tcpdump 2>&1 &
        sleep 0.2
        echo "${yellow}** Starting curl to post/echo at $SERVER_ADDR ($SERVER_IP) under monitoring${white}"
        curl -s --retry 0 --max-time 10 -d "sparedata=$GENERATEDDATA" -o $WORKDIR/SPAREDATARECEIVED $SERVER >/dev/null 2>&1
        $SNIFFJOKECLIBIN info > $WORKDIR/dumpService_info.log
        $SNIFFJOKECLIBIN ttlmap > $WORKDIR/dumpService_ttlmap.log
        $SNIFFJOKECLIBIN quit > $WORKDIR/dumpService_quit.log
        if [ "$?" -eq 0 ]; then
            echo "${green}sniffjoke correctly closed${white}"
        else
            echo "${red}sniffjoke crashed during the test: very bad line to read :( remove $TEMPDIR/$LOCATION by hand${white}"
            tput sgr0; exit
        fi

        sleep 0.5
        killall -HUP tcpdump
    done;

    echo 0 > $TESTID/passed_count
    for i in `seq 1 $REPLICAn`;
    do
        WORKDIR=$TESTID/replica-${i}
        if [ -e "$WORKDIR/SPAREDATARECEIVED" ]; 
        then
            tr -d "\n" < $WORKDIR/SPAREDATARECEIVED > $WORKDIR/SPAREDATARECEIVED.clean
            CHECKSUM=`md5sum "$WORKDIR/SPAREDATARECEIVED.clean" | cut -b -32`
        else
            CHECKSUM="{unexistent-output-file}"

            # maybe the network has get an error
            isWorked=`grep "^0 packets captured" $WORKDIR/output.tcpdump`

            if [ -n "$isWorked" ]; then
                echo "${red}Something in the network is not going well, and will not be a SniffJoke fault"
                echo "${red}please, restart the test and remove the $TEMPDIR/$LOCATION"
                tput sgr0; exit;
            fi
        fi

        echo "orig:$VERIFYSUM recv:$CHECKSUM $TESTID $i" >> plugins-collected-feedback
        if [ $VERIFYSUM != $CHECKSUM ];
        then
            # the failed_hacks and the working_hacks are generated and treated in the same style
            # the follow are useful infos for debug
            echo "$VERIFYSUM vs $CHECKSUM from $PNAME-$SCRAMBLE replica $i" >> $TESTID/failed_info
        else
            echo $i > $TESTID/passed_count
        fi
    done

    if [ `cat $TESTID/passed_count` -eq $REPLICAn ];
    then
        echo $SCRAMBLE >> $PNAME/working_scrambles
        echo "${yellow}* FINISHED TEST $TESTID: ${green}TEST PASSED${white}\n"
        return 1
    else
        echo $SCRAMBLE >> $PNAME/failed_scrambles
        echo "${yellow}* FINISHED TEST $TESTID: ${red}TEST FAILED${white}\n"
        return 0
    fi
}

while getopts “hl:d:n:u:g:s:” OPTION
do
     case $OPTION in
         h)
             usage
             tput sgr0; exit 1
             ;;
         l)
             LOCATION=`echo $OPTARG | sed 's#/*$##'` #removing eventual(s) trailing slash
             ;;
         d)
             WORKPATH=`echo $OPTARG | sed 's#/*$##'` #removing eventual(s) trailing slash
             ;;
         n)
             REPN=$OPTARG
             ;;
         u)
             USERNAME=$OPTARG
             ;;
         g)
             GROUPNAME=$OPTARG
             ;;
# -s option is semi-secret, because I use them while testing a server side method 
# more complex than the post_echo.php
         s)
             SERVERURL=$OPTARG
             ;;
         ?)
             usage
             tput sgr0; exit 1
             ;;
     esac
done

TEMPDIR="/tmp"
cd $TEMPDIR

SNIFFJOKEBIN=`which sniffjoke`
if [ -z $SNIFFJOKEBIN ]; then
    echo "\n${red}"
    echo "\"which sniffjoke\" has found nothing"
    echo "Are sniffjoke installed with the name \"sniffjoke\" ?"
    echo "${white}"
    tput sgr0; exit;
fi

CURLBIN=`which curl`
if [ -z $CURLBIN ]; then
    echo "\n${red}"
    echo "\"which curl\" has found nothing"
    echo "curl is required by this testing script, because are performed some HTML POSTs"
    echo "${white}"
    tput sgr0; exit;
fi

WGETBIN=`which wget`
if [ -z $WGETBIN ]; then
    echo "\n${red}"
    echo "\"which wget\" has found nothing"
    echo "wget is required by this testing script, because is retrivered the index file where get the testing servers"
    echo "${white}"
    tput sgr0; exit;
fi

SNIFFJOKECLIBIN=`which sniffjokectl`
if [ -z $SNIFFJOKECLIBIN ]; then
    echo "\n${red}"
    echo "\"which sniffjokectl\" has found nothing"
    echo "Are sniffjoke installed with the name \"sniffjokectl\" ?"
    echo "${white}"
    tput sgr0; exit;
fi

USERID=`id -u`
if [ $USERID != "0" ]; then
    echo "- Error, only root should run $0"
    tput sgr0; exit;
fi

if [ -z $LOCATION ]; then
    usage
    echo "\n${red}"
    echo "it's required a LOCATION name, eg: office, home, nickhome, starbucks..."
    echo "sniffjoke-autotest will generate the best plugins-enabled.conf usable in this environment"
    echo "at the end of the tests (that include continuos restarting of sniffjoke with different options)"
    echo "will be created a new directory describing your location. after you will customize the options"
    echo "${white}"
    tput sgr0; exit;
fi

if [ -z $WORKPATH ]; then
    usage
    echo "\n${red}"
    echo "it's required the PATH of commonly used working dir, where 'generic' is installed"
    echo "usually it's /usr/local/var/sniffjoke, otherwise, try to locate where generic location has"
    echo "been installed in your distro"
    echo "${white}"
    tput sgr0; exit;
fi

if [ ! -d $WORKPATH ]; then
    usage
    echo "\n${red}"
    echo "option \"-d\" wrong argument: no such directory exist"
    echo "${white}"
    tput sgr0; exit;
fi

if [ -z $USERNAME ]; then
    USERNAME="nobody"
fi

if [ -z $GROUPNAME ]; then
    group_check
fi
# user group privilege downgrade, this variable will be passed to ipopt testing
UGPD="--user $USERNAME --group $GROUPNAME"

if [ ! -d $WORKPATH/generic ]; then
    usage
    echo "\n${red}"
    echo "options \"-d\" invalid directory: we are looking for the path containing 'generic/'"
    echo "sniffjoke-autotest create at the given \"-d\", the new '$LOCATION/' copying some files from 'generic/'"
    echo "${white}"
    tput sgr0; exit;
fi

if [ -d $WORKPATH/$LOCATION ]; then
    echo "\n${red}"
    echo "error: $WORKPATH/$LOCATION directory already present, remove by hand: don't keep old location, nor two location with the same name :P"
    tput sgr0; exit;
fi

if [ -d $TEMPDIR/$LOCATION ]; then
    usage
    echo "\n${red}"
    echo "- error: $TEMPDIR/$LOCATION directory already present"
    echo "${white}"
    tput sgr0; exit;
else
    mkdir $TEMPDIR/$LOCATION
fi

cd $TEMPDIR/$LOCATION
ln -s $WORKPATH/generic .

# dumping of useful information when sniffjoke doesn't run and you ask to the dev
ifconfig >> LAN.info
route -n >> LAN.info
iptables -nL >> LAN.info
uname -a >> LAN.info
cp -r /proc/sys/net/ipv4/ kernel_ipv4.info/ >/dev/null 2>&1

echo "${yellow}+ Starting SniffJoke hacks test"
echo "* Stopping possible running sniffjoke ($SNIFFJOKECLIBIN quit)"
$SNIFFJOKECLIBIN quit >/dev/null 2>&1

PPATH="/usr/local/lib/sniffjoke"
echo "* The test will use path $PPATH" to load plugins

if [ -z $SERVERURL ]; 
then
    FILEURL="http://www.delirandom.net/sniffjoke/testsuite.php?v=$VERSION"
    echo "* retrivering multi-OS testing server list ($FILEURL)"
    SERVERFILE="testsuite.info"
    wget -O $SERVERFILE $FILEURL  >/dev/null 2>&1
    if ! [ -e $SERVERFILE ]; 
    then
        echo "\n${red}"
        echo "- unable to retriver $SERVERFILE with [$FILEURL]"
        echo "${white}"
        tput sgr0; exit;
    fi

    # at the moment linux is the only tested OS
    SERVER=`grep "LINUX=" $SERVERFILE | cut -b 7-`
else
    echo "${blue} hello ${yellow}yellow ${blue}daddy! http://shinysushi.deviantart.com/art/Asari-Logic-194960943"
    SERVER=$SERVERURL
fi

# uh remember coder: the http port www.umpalumpa.net:803213 is NOT SUPPORTED
SERVER_ADDR=`echo $SERVER | sed -e's/.*\/\///' | sed -e's/\/.*//'`
SERVER_IP=`host $SERVER_ADDR | head -1 | sed -e's/.*address\ //'`

# mayhe host has result not able to resolve $SERVER_ADDR  -- *r stay for "Resolved"
THREEDOTr=`echo $SERVER_IP | tr -d [:digit:]`

# for whom use an IP addr                                 -- *i stay for "Inserted"
THREEDOTi=`echo $SERVER_ADDR | tr -d [:digit:]`

if [ "$THREEDOTi" == "..." ]; then
    SERVER_IP=$SERVER_ADDR
else
    if [ "$THREEDOTr" != "..." ]; then
        echo "${red} from $SERVER unable to resolve hostname '$SERVER_ADDR', check dns and etc..."
        tput sgr0; exit;
    fi
fi

# oh yeah pippa middleton, this line is for you!!1:
echo "${green} resolved remote server IP '$SERVER_IP' address '$SERVER_ADDR'"


PLUGINLIST="plugins-testsuite"
dump_plugin_file
PLUGIN_NUMBER=`wc -l < $PLUGINLIST`

# generate the SPAREDATA file to send
GENERATEDFILE="SPAREDATA_plugin"
# the number '6' is not used in the test because sniffjoke, when runned
# in debug mode (--debug 6) instead of filling the random segment of data
# inject with random data, use the number '6'. Is useful when debugging 
# an hack.
seq 1000 9000 | tr -d [:cntrl:] | sed -e's/6/111/g' | strings | tr -d "\n" > $GENERATEDFILE
GENERATEDDATA=`cat $GENERATEDFILE`
VERIFYSUM=`md5sum $GENERATEDFILE | cut -b -32`

# OK GUYS, SINCE HERE WE'D SETUP THE ENVIRONMENT, NOW START THE THREE SECTION Of TESTS:
# TEST 1) a simple plain connection, useful for the first traceroute and general checkup
# TEST 2) testing of every IP/TCP header options and conseguencial generation of "iptcp-options.conf"
# TEST 3) testing of every scramble+plugin combination, generation of "plugins-enabled.conf"
# at the end, you have all the location specific files required for a safe usage of sniffjoke

# TEST 1
PLUGIN="segmentation,INNOCENT"
start_test 1
if [ ! $? ]; then
    echo "${red} the simplest test has failed, something dirty don't work in your network"
    tput sgr0; exit;
fi
firstsimple=$TEMPDIR/$LOCATION/firstsimple
mv $TEMPDIR/$LOCATION/segmentation/INNOCENT/replica-1 $firstsimple

# TEST 2
# (now in $firstsimple/ttlfocusmap.bin is cached the traceroute)
IPTCPPROBE=`which sj-iptcpopt-probe`
$IPTCPPROBE -w "$TEMPDIR/$LOCATION" -u "$SERVER" -n $USERNAME -g $GROUPNAME -i $SERVER_IP

# TEST 3
# (now in $TEMPDIR/$LOCATION/iptcp-options.conf there are the correct usage for this location)
for PLUGNDX in `seq 1 $PLUGIN_NUMBER`; do
    PLUGIN=`head -$PLUGNDX $PLUGINLIST | tail -1`

    # those test need to be fixed or be used only where my test script will be hosted
    echo "${blue}Starting test vs Linux environment: ($SERVER_ADDR, $SERVER_IP)"
    start_test $REPN
done

# Parsing & formatting the results of TEST 3
PeL="plugins-enabled.conf"
echo "# this is an autogenerated file by sniffjoke-autotest " > $PeL
echo "# wheneven you change the network router, provider or some malfunction is detected" >> $PeL
echo "# you are invited to regenerate this file" >> $PeL
echo "# this plugins-enabled.conf are dumped for location: $LOCATION using $SERVER_IP" >> $PeL

success_count=0
for PLUGIN in `ls */working_scrambles 2>/dev/null | sed -e 's/\/working_scrambles//'` ; do
    SCRAMBLES=`cat $PLUGIN/working_scrambles | tr " " "," | tr [:cntrl:] ","`
    echo "$PLUGIN,$SCRAMBLES" | sed -es/,\$// >> $PeL
    success_count=$(($success_count+1));
done

echo "\n# follow the hacks+scramble that don't pass the sniffjoke-autotest in environment \"$LOCATION\"\n" >> $PeL
failure_count=0
for PLUGIN in `ls */failed_scrambles 2>/dev/null | sed -e 's/\/failed_scrambles//'` ; do
    SCRAMBLES=`cat $PLUGIN/failed_scrambles | tr " " "," | tr [:cntrl:] ","`
    echo "# $PLUGIN,$SCRAMBLES" | sed -es/,\$// >> $PeL
    failure_count=$(($failure_count+1));
done

now=`date`
echo "\n# Generated in date: $now\n" >> $PeL

echo "${yellow}FINISHED!\n"
echo " ${red} $failure_count combinations of hack+scramble have not worked"
echo " ${green} $success_count combinations of hack+scramble have worked correctly${white}"

if [ $failure_count -ge 6 ]; then
    echo "\n"
    echo " ${red} Several combinations of hack+scramble have not worked: you can try to run the tests using a different MTU on your current interface: eg, ifconfig <interface> mtu 1200"
    echo "\n"
fi

chmod 444 plugins-enabled.conf

DESTINATION=$WORKPATH/$LOCATION
mkdir $DESTINATION

cp $WORKPATH/generic/port-aggressivity.conf $DESTINATION 
cp $WORKPATH/generic/sniffjoke-service.conf $DESTINATION
cp $TEMPDIR/$LOCATION/iptcp-options.conf $DESTINATION
cp plugins-enabled.conf $DESTINATION/plugins-enabled.conf

echo "\n${yellow}* sniffjoke-autotest has  a conf file $TEMPDIR/$LOCATION/plugins-enabled.conf"
echo "* that conf has been copyed in $DESTINATION with the other default configuration file."
echo "* for custom configuration this config file can be text edited."
echo "* now, when in this network environment, you could get the best sniffjoke behaviour starting it with the option --location $LOCATION${white}"

echo "\n${violet}SniffJoke is in BETATESTING: if you want to contribute, please type a simple string,"
echo "The typed string will be used to generate the name of the compressed data archive, ${green}after,"
echo "you should choose to send to us, or to sent later whenever you could ask for support"
echo "${violet}Otherwise, to don't generate the tar.gz, leave the string empty.${white}"

echo "\n"
echo -n "a-random-string [empty for not generate anything]: "
read testerID

if [ -z $testerID ]; then
    echo "empty string: sniffjoke-autotest done."
else
    dFname="autout-$testerID-$LOCATION.tar.bz2"
    tar -c -j -f $dFname --exclude='*DATA*' *
    echo "\n"
    echo "${green}Thanks you \"$testerID\"! ${white}$dFname has been generated in $TEMPDIR/$LOCATION/$dFname"
    echo "in your $TEMPDIR/$LOCATION there are the traffic test done by sniffjoke, recorded by tcpdump and the logfiles"
    echo "${red}No personal data, nor payload of non-testing packets are recorded, but some destination IP address will be present"
    echo "if you belive to have privacy issue, delete your entire $TEMPDIR/$LOCATION directory${white} and don't send us the file.\n"
    echo "If you have some trouble using sniffjoke, making the configuration or you want contribute to the project"
    echo "send it via mail to ${green}sniffjoke-team@delirandom.net${white} thank you!"
fi

# clearing gay colors
tput sgr0
