#!/bin/sh 

# if you want modify the test, simply create those file by hands
# fake_zero_window.so is set INNOCENT and usually is disabled, I've keep
# INNOCENT fake_zero_window.so to broke the session and use it as 
# check of sured failure

dump_plugin_file() {
	cat >> $PLUGINLIST << __EOF__
fake_close_fin.so,PRESCRIPTION
fake_close_fin.so,MALFORMED
fake_close_fin.so,GUILTY
fake_data.so,PRESCRIPTION
fake_data.so,MALFORMED
fake_data.so,GUILTY
fake_seq.so,PRESCRIPTION
fake_seq.so,MALFORMED
fake_seq.so,GUILTY
valid_rst_fake_seq.so,INNOCENT
fragmentation.so,INNOCENT
fragmentation_with_fake_data.so,PRESCRIPTION,INNOCENT
fake_close_rst.so,PRESCRIPTION
fake_close_rst.so,MALFORMED
fake_close_rst.so,GUILTY
fake_syn.so,PRESCRIPTION
fake_syn.so,MALFORMED
fake_syn.so,GUILTY
fake_zero_window.so,INNOCENT
shift_ack.so,PRESCRIPTION
shift_ack.so,MALFORMED
shift_ack.so,GUILTY
__EOF__
}

start_singletest() {
	PNAME=`echo $PLUGIN | sed -es/\.so.*//`
	SCRAMBLE=`echo $PLUGIN | sed -es/.*\.so,//`
	TESTID=`echo $PLUGIN | tr "," "-"`
	workingdir="/tmp/$LOCATION/$TESTID"
	mkdir $workingdir
	echo "+ Starting sniffjoke with $PLUGIN and $SCRAMBLE"
	$SNIFFJOKEBIN --debug 6 --logfile $workingdir/logtest --chroot-dir $workingdir --only-plugin $PLUGIN 
	sleep 2 && $SNIFFJOKEBIN start 
	cd $workingdir
	# $SERVER is like http://www.delirandom.net/sniffjoke_test/post_echo.php
	INTERFACE=`$SNIFFJOKEBIN stat | grep "local interface" | cut -b 19- | sed -es/\,.*//`
	echo "starting tcpdump in $INTERFACE dumping $workingdir/$PNAME-$SCRAMBLE.pcap tcp port 80"
	(tcpdump -i $INTERFACE -w "$workingdir/$PNAME-$SCRAMBLE.pcap" -s 0 tcp port 80) &
	sleep 1
	curl -d "sparedata=`cat $GENERATEDFILE`" $SERVER > "$workingdir/$PNAME-$SCRAMBLE.received"
	sleep 1 
	$SNIFFJOKEBIN quit
	killall -9 tcpdump
	CHECKSUM=`md5sum "$PNAME-$SCRAMBLE.received" | cut -b -32`
	cd ..
	echo "finished test in $TESTID"
	if [ $VERIFYSUM = $CHECKSUM ]; then
		echo "$SCRAMBLE" >> "/tmp/$LOCATION/$PNAME.working_hacks"
	else
		echo "$SCRAMBLE" >> "/tmp/$LOCATION/$PNAME.failed_hacks"
	fi 
	echo "orig:$VERIFYSUM recv:$CHECKSUM $TESTID" >> /tmp/$LOCATION/SjcollectedFeedback
	clear
}

echo "Sniffjoke testsuite test every default plugin with every scrambling tech"

USERID=`id -u`
if [ $USERID != "0" ]; then
	echo "- Error, only root should run $0"
	exit;
fi

if [ -z $1 ]; then
	echo "Is required as first argument the LOCATION name, eg: office, home, nickhome, starbucks..."
	echo "sniffjoke-autotest will generate the best plugins_enabled.conf.<LOCATION NAME> usable in this environment"
	exit;
fi
LOCATION=$1

if [ -z $2 ]; then
	echo "as second argument is required the PATH of the plugins_enabled.conf.generic"
	exit;
fi
ETCPATH=$2

if [ ! -d $ETCPATH ]; then
	echo "the second argument: $ETCHPATH is not a directory"
	echo "as second argument is required the PATH of the plugins_enabled.conf.generic"
	exit;
fi


if [ -d "/tmp/$LOCATION" ]; then
	echo "- remove your /tmp/$LOCATION directory: already present"
	# call me old, but I don't put a blind rm -rf on a script run by root :P
	exit
fi

SNIFFJOKEBIN=`which sniffjoke`
if [ -z $SNIFFJOKEBIN ]; then
	echo "\"which sniffjoke\" has found nothing"
	echo "Are sniffjoke installed with the name \"sniffjoke\" ?"
	exit;
fi

echo "+ Starting SniffJoke hacks test"
echo "* Stopping running sniffjoke ($SNIFFJOKEBIN quit)"
$SNIFFJOKEBIN quit

PPATH="/usr/local/lib/sniffjoke"
echo "* using plugin path $PPATH"

FILEURL="http://www.delirandom.net/sniffjoke/testsuite.info"
echo "retrivering multi-OS testing server list ($FILEURL)"
SERVERFILE="/tmp/testsuite.info"
rm -f $SERVERFILE
wget -O $SERVERFILE $FILEURL

if ! [ -e $SERVERFILE ]; then
	echo "- unable to retriver $SERVERFILE with [$FILEURL]"
	exit;
fi

PLUGINLIST="/tmp/$LOCATION/sniffjoke-testsuite-plugins"
if ! [ -e $PLUGINLIST ]; then
	mkdir /tmp/$LOCATION
	dump_plugin_file
fi
PLUGIN_NUMBER=`wc -l < $PLUGINLIST`

# generate the SPAREDATA file to send
GENERATEDFILE="/tmp/$LOCATION/SPAREDATA.generated"
seq 1000 9000 | tr -d [:cntrl:] | strings > $GENERATEDFILE
VERIFYSUM=`md5sum $GENERATEDFILE | cut -b -32`


for PLUGNDX in `seq 1 $PLUGIN_NUMBER`; do
	PLUGIN=`tail -$PLUGNDX $PLUGINLIST | head -1`

#	OS="WINDOWS"
#	SERVER=`cat "$SERVERFILE" | grep "$OS" | cut -b 9-`
#	echo $SERVER
#	start_singletest 

	# those test need to be fixed or be used only where my test script will be hosted
	OS="LINUX"
	SERVER=`grep "$OS=" $SERVERFILE | cut -b 7-`
	echo "$PLUGIN+$SERVER"
	start_singletest 

#	OS="OTHER"
#	SERVER=`grep "$OS=" $SERVERFILE | cut -b 7-`
#	echo $SERVER
#	start_singletest 
done

# parse analysis output to build a plugins_enabler.conf

success=`ls /tmp/$LOCATION/*.working_hacks`
PeL="/tmp/$LOCATION/plugins_enabled.conf.$LOCATION"
echo "# this is an autogenerated file by sniffjoke-autotest " > $PeL 
echo "# wheneven your network router, provider or some malfunction is detected" >> $PeL
echo "# you are invited to regenerate this file" >> $PeL
echo "# this plugins_enabled.conf are dumped for location: $LOCATION" >> $PeL
echo "\n\n" >> $PeL

for hack in $success; do
	hackName=`basename $hack | sed -es/working_hacks/so/`
	scramble=`cat $hack | tr " " "," | tr [:cntrl:] ","`
	echo "$hackName,$scramble" | sed -es/,\$// >> $PeL
done

echo "\n\n# follow the hacks/scramble that don't pass the sniffjoke-autotest in environment $LOCATION\n" >> $PeL
failure=`ls /tmp/$LOCATION/*.failed_hacks`
for hack in $failure ; do
	hackName=`basename $hack | sed -es/failed_hacks/so/`
	scramble=`cat $hack | tr " " "," | tr [:cntrl:] ","`
	echo "# $hackName,$scramble" | sed -es/,\$// >> $PeL
done

now=`date`
echo "\n\n# Generated in date: $now" >> $PeL

echo "file /tmp/$LOCATION/plugins_enabled.conf.$LOCATION has been generated"
chmod 444 /tmp/$LOCATION/plugins_enabled.conf.$LOCATION
mv /tmp/$LOCATION/plugins_enabled.conf.$LOCATION $ETCPATH
echo "moved in $ETCPATH, now you could run sniffjoke with the option --location $LOCATION when you are in this network environment."
