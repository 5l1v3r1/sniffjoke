
enter in hacks/
mkdir your new-hack-name
vim Makefile.ac
	add your new-hack-name
cp another_hack/Makefile.ac new-hack-name/
vim new-hack-name/Makefile.ac
	change the filename to compile
cp another_hack/another_hack.cc new-hack-name/new-hack-name.cc
	edit and write your code
cd ..
edit configure.ac and add your entry in AC_CONFIG_FILES

./autogen.sh

hacks FREQUENCY vs hacks PROBABILITY

an hack will not always be used, for two reasons:

1) every hack is bandwitdh usage, and we dislike add proportional overweight
2) if an hack is used evetytime, will be easily detected by an updated sniffer

an efficent hack, is used when happen, and the happening is somehow related to
the application protocol we aim to protect. eg: a IRC chat is a session long 
almost hours fill with sensible data, an http get is sensible only on the
sending of the get, and an email is full of sensibile data send in short time.

in addiction, some hack is based in sending fake data double time the size of
the original packet, this is intensive and an user should define the flexibility
of the injection.

this is what we call FREQUENCY, Frequency is an enum defined in Hack.h:

meaning of single value in the "normal" PROBABILITY (probability is a variable like frequence)

RARE		
            every packet has the 24% to be hacked
COMMON		
            every packet has the 56% to be hacked
ALWAYS		
            yes, every packet is hacked: 100% not good, but, useful in rare situations
PACKETS10PEEK	
            when the packets count related to the session if 9, 10 or 11 
		    (or 19, 20, 21...) the probability is 80%, the other time, 8%
PACKETS30PEEK	
            session count 29, 30, 31 (59, 60, 61), are 80%, the other, 8%
TIMEBASED5S	
            when the absolute time express in seconds is divisible by 5, the probability 
		    is 96% the other time, 8%
TIMEBASED20S	
            absolute timing in seconds divisible by 20, 96%, other time, 8%
STARTPEEK	
            for the first 20 packets, 80%, since 21 to 40, 40%, after 8%
LONGPEEK	
            first 60 packets 64%, since 61 to 120 32%, the other until the end 8%

the packets count is related to the original sessions packets, the hacked injected are excluded.

the PROBABILITY is choosed by the user with the command

# sniffjoke set [startport] [endport] weight

for a single port setting, like http:

# sniffjoke set 80 80 heavy

works (is used in testing time)

the value are: none, light, normal, heavy.

NONE   
            multiply by 0 the value returned by Frequency (suppress hacks)
LIGHT
            multiply by 4 the value returned by Frequency (you should halve the
		    percentage written before)
NORMAL 
            multiply by 8 (this is because every number is divisible by eight)
HEAVY
            multiply by 12

(coders: TCPTrack.cc::percentage is the method)


