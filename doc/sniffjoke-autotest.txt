This directory contains the scripts for sniffjoke testing, analysis etc.

1) sniffjoke-autotest

WHY IS IMPORTANT MAKE THOSE TEST

The hack a technique able to defeat the sniffer, but:

1) some hacks work in a sniffer and not in the other
2) some hacks are simply theoretical
3) some hacks are deducted reading the kernel policy and the RFCs
4) some routers silently discarge our injected packets and 
5) some firewalls drop them because seem corrupted 
6) some kernels acquire the injected packet ruining the session, 
   or almost the congestion window if not the data.

for those reasons an intesive testing is useful, and after you have installed
sniffjoke, run:

# ./sniffjoke-autotest <LOCATION_NAME>

if sniffjoke is not in the default path (/usr/local/bin/sniffjoke), put as first
argument your real path:

# ./sniffjoke-autotest <LOCATION_NAME> /sbin/sniffjoke

maybe some distribution use other path, found where sniffjoke is with:

# whereis sniffjoke

the "sniffjoke-autotest" script uses a one time chroot environment under /tmp, and collects
information about which kind of hacks your network permits to use. the test are done
searching in www.delirandom.net/sniffjoke/testsuite.info, the address of the server 
available for the test. at the time three servers are used, one with different remote operating system
(FIXME - define them ) and the server is distributed because I want to avoid
an eccessive use of the tests (I don't know how much bandwidth will be consumed, and 
I will assure that the server used are related to the sniffjoke developer, will not
keep logs about sniffjoke users and if you want make those test by yourself, you are free to do that)

1) require to be runned as root
2) create a lot of dump in /tmp/ directory, that are not removed at the end of the test
3) connect to http://www.delirandom.net/sniffjoke_test/post_echo.php
   and other servers are welcomed
4) POST the files, records the answers, verify md5sum, records timings, records .pcap

EXAMPLE:

I've started:
root@caturday:~/Desktop/sniffjoke-project/sniffjoke/src/autotest# ./sniffjoke-autotest myoffice /usr/local/var/sniffjoke/

and after a lot of verbosity, I've got /tmp/myoffice, containing a lot of logs and 
useful derivation, like:

root@caturday:/tmp/myoffice# cat SjcollectedFeedback 
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec shift_ack.so-GUILTY
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec shift_ack.so-MALFORMED
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec shift_ack.so-PRESCRIPTION
orig:366362ed7920364b473e5deaa8ca07ec recv:d41d8cd98f00b204e9800998ecf8427e fake_zero_window.so-INNOCENT
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_syn.so-GUILTY
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_syn.so-MALFORMED
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_syn.so-PRESCRIPTION
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_close_rst.so-GUILTY
orig:366362ed7920364b473e5deaa8ca07ec recv:988691468cc248630960360e84befb77 fake_close_rst.so-MALFORMED
orig:366362ed7920364b473e5deaa8ca07ec recv:3edcdb3bf00c7d317139aa30f02529da fake_close_rst.so-PRESCRIPTION
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fragmentation.so-INNOCENT
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec valid_rst_fake_seq.so-INNOCENT
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_data.so-PRESCRIPTION
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_close_fin.so-GUILTY
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_close_fin.so-MALFORMED
orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_close_fin.so-PRESCRIPTION

The checksum of the original data and the received data must match, in a correct transmission.
for Example this test is revealed that three hacks wont work from my office, precisely:

orig:366362ed7920364b473e5deaa8ca07ec recv:d41d8cd98f00b204e9800998ecf8427e fake_zero_window.so-INNOCENT
orig:366362ed7920364b473e5deaa8ca07ec recv:988691468cc248630960360e84befb77 fake_close_rst.so-MALFORMED
orig:366362ed7920364b473e5deaa8ca07ec recv:b0c2c3636da63e254bdab08007a7b068 fake_data.so-MALFORMED

the fake_zero_window.so is actually an always invalid hack, used for checking. The unique
hack+scramble combination don't work in my office is fake_close_rst + MALFORMED and data + MALFORMED
and thus, the generated plugins-enabled.conf is:

root@caturday:/tmp/myoffice# cat plugins_enabled.conf  | strings
# this is an autogenerated file by sniffjoke-autotest 
# wheneven your network router, provider or some malfunction is detected
# you are invited to regenerate this file
# this plugins_enabled.conf are dumped for location: myoffice
fake_close_fin.so,GUILTY,MALFORMED,PRESCRIPTION
fake_close_rst.so,GUILTY,PRESCRIPTION
fake_data.so,GUILTY,PRESCRIPTION
fake_seq.so,GUILTY,MALFORMED,PRESCRIPTION
fake_syn.so,GUILTY,MALFORMED,PRESCRIPTION
fragmentation_with_fake_data.so,PRESCRIPTION,INNOCENT
fragmentation.so,INNOCENT
shift_ack.so,GUILTY,MALFORMED,PRESCRIPTION
valid_rst_fake_seq.so,INNOCENT
# follow the hacks/scramble that don't pass the sniffjoke-autotest in environment myoffice
fake_close_rst.so,MALFORMED
fake_data.so,MALFORMED
fake_zero_window.so,INNOCENT
# Generated in date: Thu Feb  3 02:53:39 CET 2011

and is copied on the destination location directory, called with sniffjoke --location $LOCATION_NAME

the other hacks are considered valid because all have returned the same md5sum of the thata sent.
eg:

orig:366362ed7920364b473e5deaa8ca07ec recv:366362ed7920364b473e5deaa8ca07ec fake_seq.so-PRESCRIPTION

